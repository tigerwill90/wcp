// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebClipboardClient is the client API for WebClipboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebClipboardClient interface {
	Copy(ctx context.Context, opts ...grpc.CallOption) (WebClipboard_CopyClient, error)
	Paste(ctx context.Context, in *PasteOption, opts ...grpc.CallOption) (WebClipboard_PasteClient, error)
	Clean(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type webClipboardClient struct {
	cc grpc.ClientConnInterface
}

func NewWebClipboardClient(cc grpc.ClientConnInterface) WebClipboardClient {
	return &webClipboardClient{cc}
}

func (c *webClipboardClient) Copy(ctx context.Context, opts ...grpc.CallOption) (WebClipboard_CopyClient, error) {
	stream, err := c.cc.NewStream(ctx, &WebClipboard_ServiceDesc.Streams[0], "/proto.WebClipboard/Copy", opts...)
	if err != nil {
		return nil, err
	}
	x := &webClipboardCopyClient{stream}
	return x, nil
}

type WebClipboard_CopyClient interface {
	Send(*CopyStream) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type webClipboardCopyClient struct {
	grpc.ClientStream
}

func (x *webClipboardCopyClient) Send(m *CopyStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *webClipboardCopyClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *webClipboardClient) Paste(ctx context.Context, in *PasteOption, opts ...grpc.CallOption) (WebClipboard_PasteClient, error) {
	stream, err := c.cc.NewStream(ctx, &WebClipboard_ServiceDesc.Streams[1], "/proto.WebClipboard/Paste", opts...)
	if err != nil {
		return nil, err
	}
	x := &webClipboardPasteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WebClipboard_PasteClient interface {
	Recv() (*PastStream, error)
	grpc.ClientStream
}

type webClipboardPasteClient struct {
	grpc.ClientStream
}

func (x *webClipboardPasteClient) Recv() (*PastStream, error) {
	m := new(PastStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *webClipboardClient) Clean(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.WebClipboard/Clean", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebClipboardServer is the server API for WebClipboard service.
// All implementations must embed UnimplementedWebClipboardServer
// for forward compatibility
type WebClipboardServer interface {
	Copy(WebClipboard_CopyServer) error
	Paste(*PasteOption, WebClipboard_PasteServer) error
	Clean(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedWebClipboardServer()
}

// UnimplementedWebClipboardServer must be embedded to have forward compatible implementations.
type UnimplementedWebClipboardServer struct {
}

func (UnimplementedWebClipboardServer) Copy(WebClipboard_CopyServer) error {
	return status.Errorf(codes.Unimplemented, "method Copy not implemented")
}
func (UnimplementedWebClipboardServer) Paste(*PasteOption, WebClipboard_PasteServer) error {
	return status.Errorf(codes.Unimplemented, "method Paste not implemented")
}
func (UnimplementedWebClipboardServer) Clean(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clean not implemented")
}
func (UnimplementedWebClipboardServer) mustEmbedUnimplementedWebClipboardServer() {}

// UnsafeWebClipboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebClipboardServer will
// result in compilation errors.
type UnsafeWebClipboardServer interface {
	mustEmbedUnimplementedWebClipboardServer()
}

func RegisterWebClipboardServer(s grpc.ServiceRegistrar, srv WebClipboardServer) {
	s.RegisterService(&WebClipboard_ServiceDesc, srv)
}

func _WebClipboard_Copy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WebClipboardServer).Copy(&webClipboardCopyServer{stream})
}

type WebClipboard_CopyServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*CopyStream, error)
	grpc.ServerStream
}

type webClipboardCopyServer struct {
	grpc.ServerStream
}

func (x *webClipboardCopyServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *webClipboardCopyServer) Recv() (*CopyStream, error) {
	m := new(CopyStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _WebClipboard_Paste_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PasteOption)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WebClipboardServer).Paste(m, &webClipboardPasteServer{stream})
}

type WebClipboard_PasteServer interface {
	Send(*PastStream) error
	grpc.ServerStream
}

type webClipboardPasteServer struct {
	grpc.ServerStream
}

func (x *webClipboardPasteServer) Send(m *PastStream) error {
	return x.ServerStream.SendMsg(m)
}

func _WebClipboard_Clean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebClipboardServer).Clean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WebClipboard/Clean",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebClipboardServer).Clean(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WebClipboard_ServiceDesc is the grpc.ServiceDesc for WebClipboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebClipboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WebClipboard",
	HandlerType: (*WebClipboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Clean",
			Handler:    _WebClipboard_Clean_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Copy",
			Handler:       _WebClipboard_Copy_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Paste",
			Handler:       _WebClipboard_Paste_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/cp.proto",
}
