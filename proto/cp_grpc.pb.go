// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebClient is the client API for Web service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebClient interface {
	Copy(ctx context.Context, opts ...grpc.CallOption) (Web_CopyClient, error)
	Paste(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Web_PasteClient, error)
}

type webClient struct {
	cc grpc.ClientConnInterface
}

func NewWebClient(cc grpc.ClientConnInterface) WebClient {
	return &webClient{cc}
}

func (c *webClient) Copy(ctx context.Context, opts ...grpc.CallOption) (Web_CopyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Web_ServiceDesc.Streams[0], "/proto.Web/Copy", opts...)
	if err != nil {
		return nil, err
	}
	x := &webCopyClient{stream}
	return x, nil
}

type Web_CopyClient interface {
	Send(*Payload) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type webCopyClient struct {
	grpc.ClientStream
}

func (x *webCopyClient) Send(m *Payload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *webCopyClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *webClient) Paste(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Web_PasteClient, error) {
	stream, err := c.cc.NewStream(ctx, &Web_ServiceDesc.Streams[1], "/proto.Web/Paste", opts...)
	if err != nil {
		return nil, err
	}
	x := &webPasteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Web_PasteClient interface {
	Recv() (*Payload, error)
	grpc.ClientStream
}

type webPasteClient struct {
	grpc.ClientStream
}

func (x *webPasteClient) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WebServer is the server API for Web service.
// All implementations must embed UnimplementedWebServer
// for forward compatibility
type WebServer interface {
	Copy(Web_CopyServer) error
	Paste(*emptypb.Empty, Web_PasteServer) error
	mustEmbedUnimplementedWebServer()
}

// UnimplementedWebServer must be embedded to have forward compatible implementations.
type UnimplementedWebServer struct {
}

func (UnimplementedWebServer) Copy(Web_CopyServer) error {
	return status.Errorf(codes.Unimplemented, "method Copy not implemented")
}
func (UnimplementedWebServer) Paste(*emptypb.Empty, Web_PasteServer) error {
	return status.Errorf(codes.Unimplemented, "method Paste not implemented")
}
func (UnimplementedWebServer) mustEmbedUnimplementedWebServer() {}

// UnsafeWebServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebServer will
// result in compilation errors.
type UnsafeWebServer interface {
	mustEmbedUnimplementedWebServer()
}

func RegisterWebServer(s grpc.ServiceRegistrar, srv WebServer) {
	s.RegisterService(&Web_ServiceDesc, srv)
}

func _Web_Copy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WebServer).Copy(&webCopyServer{stream})
}

type Web_CopyServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*Payload, error)
	grpc.ServerStream
}

type webCopyServer struct {
	grpc.ServerStream
}

func (x *webCopyServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *webCopyServer) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Web_Paste_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WebServer).Paste(m, &webPasteServer{stream})
}

type Web_PasteServer interface {
	Send(*Payload) error
	grpc.ServerStream
}

type webPasteServer struct {
	grpc.ServerStream
}

func (x *webPasteServer) Send(m *Payload) error {
	return x.ServerStream.SendMsg(m)
}

// Web_ServiceDesc is the grpc.ServiceDesc for Web service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Web_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Web",
	HandlerType: (*WebServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Copy",
			Handler:       _Web_Copy_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Paste",
			Handler:       _Web_Paste_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/cp.proto",
}
