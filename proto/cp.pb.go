// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: proto/cp.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PastStream_Error_Type int32

const (
	PastStream_Error_INVALID_OPTION PastStream_Error_Type = 0
	PastStream_Error_KEY_NOT_FOUND  PastStream_Error_Type = 1
)

// Enum value maps for PastStream_Error_Type.
var (
	PastStream_Error_Type_name = map[int32]string{
		0: "INVALID_OPTION",
		1: "KEY_NOT_FOUND",
	}
	PastStream_Error_Type_value = map[string]int32{
		"INVALID_OPTION": 0,
		"KEY_NOT_FOUND":  1,
	}
)

func (x PastStream_Error_Type) Enum() *PastStream_Error_Type {
	p := new(PastStream_Error_Type)
	*p = x
	return p
}

func (x PastStream_Error_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PastStream_Error_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_cp_proto_enumTypes[0].Descriptor()
}

func (PastStream_Error_Type) Type() protoreflect.EnumType {
	return &file_proto_cp_proto_enumTypes[0]
}

func (x PastStream_Error_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PastStream_Error_Type.Descriptor instead.
func (PastStream_Error_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_cp_proto_rawDescGZIP(), []int{4, 1, 0}
}

type ServerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbSize              int64  `protobuf:"varint,1,opt,name=db_size,json=dbSize,proto3" json:"db_size,omitempty"`
	DbPath              string `protobuf:"bytes,2,opt,name=db_path,json=dbPath,proto3" json:"db_path,omitempty"`
	GrpcMaxReceiveBytes int64  `protobuf:"varint,3,opt,name=grpc_max_receive_bytes,json=grpcMaxReceiveBytes,proto3" json:"grpc_max_receive_bytes,omitempty"`
	GcInterval          int64  `protobuf:"varint,4,opt,name=gc_interval,json=gcInterval,proto3" json:"gc_interval,omitempty"`
	DevMode             bool   `protobuf:"varint,5,opt,name=dev_mode,json=devMode,proto3" json:"dev_mode,omitempty"`
	GrpcMTls            bool   `protobuf:"varint,6,opt,name=grpc_m_tls,json=grpcMTls,proto3" json:"grpc_m_tls,omitempty"`
}

func (x *ServerStatus) Reset() {
	*x = ServerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatus) ProtoMessage() {}

func (x *ServerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatus.ProtoReflect.Descriptor instead.
func (*ServerStatus) Descriptor() ([]byte, []int) {
	return file_proto_cp_proto_rawDescGZIP(), []int{0}
}

func (x *ServerStatus) GetDbSize() int64 {
	if x != nil {
		return x.DbSize
	}
	return 0
}

func (x *ServerStatus) GetDbPath() string {
	if x != nil {
		return x.DbPath
	}
	return ""
}

func (x *ServerStatus) GetGrpcMaxReceiveBytes() int64 {
	if x != nil {
		return x.GrpcMaxReceiveBytes
	}
	return 0
}

func (x *ServerStatus) GetGcInterval() int64 {
	if x != nil {
		return x.GcInterval
	}
	return 0
}

func (x *ServerStatus) GetDevMode() bool {
	if x != nil {
		return x.DevMode
	}
	return false
}

func (x *ServerStatus) GetGrpcMTls() bool {
	if x != nil {
		return x.GrpcMTls
	}
	return false
}

type Clipboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence       uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	ExpireAt       string `protobuf:"bytes,2,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	Compressed     bool   `protobuf:"varint,3,opt,name=compressed,proto3" json:"compressed,omitempty"`
	MasterKeyNonce []byte `protobuf:"bytes,4,opt,name=master_key_nonce,json=masterKeyNonce,proto3" json:"master_key_nonce,omitempty"`
	KeyNonce       []byte `protobuf:"bytes,5,opt,name=key_nonce,json=keyNonce,proto3" json:"key_nonce,omitempty"`
	Iv             []byte `protobuf:"bytes,6,opt,name=iv,proto3" json:"iv,omitempty"`
	Checksum       []byte `protobuf:"bytes,7,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Size           int64  `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *Clipboard) Reset() {
	*x = Clipboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clipboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clipboard) ProtoMessage() {}

func (x *Clipboard) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clipboard.ProtoReflect.Descriptor instead.
func (*Clipboard) Descriptor() ([]byte, []int) {
	return file_proto_cp_proto_rawDescGZIP(), []int{1}
}

func (x *Clipboard) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Clipboard) GetExpireAt() string {
	if x != nil {
		return x.ExpireAt
	}
	return ""
}

func (x *Clipboard) GetCompressed() bool {
	if x != nil {
		return x.Compressed
	}
	return false
}

func (x *Clipboard) GetMasterKeyNonce() []byte {
	if x != nil {
		return x.MasterKeyNonce
	}
	return nil
}

func (x *Clipboard) GetKeyNonce() []byte {
	if x != nil {
		return x.KeyNonce
	}
	return nil
}

func (x *Clipboard) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *Clipboard) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *Clipboard) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type LockedTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Versions map[string][]byte `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LockedTransaction) Reset() {
	*x = LockedTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockedTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockedTransaction) ProtoMessage() {}

func (x *LockedTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockedTransaction.ProtoReflect.Descriptor instead.
func (*LockedTransaction) Descriptor() ([]byte, []int) {
	return file_proto_cp_proto_rawDescGZIP(), []int{2}
}

func (x *LockedTransaction) GetVersions() map[string][]byte {
	if x != nil {
		return x.Versions
	}
	return nil
}

type PasteOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferRate int64 `protobuf:"varint,1,opt,name=transfer_rate,json=transferRate,proto3" json:"transfer_rate,omitempty"`
}

func (x *PasteOption) Reset() {
	*x = PasteOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasteOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasteOption) ProtoMessage() {}

func (x *PasteOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasteOption.ProtoReflect.Descriptor instead.
func (*PasteOption) Descriptor() ([]byte, []int) {
	return file_proto_cp_proto_rawDescGZIP(), []int{3}
}

func (x *PasteOption) GetTransferRate() int64 {
	if x != nil {
		return x.TransferRate
	}
	return 0
}

type PastStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*PastStream_Info_
	//	*PastStream_Chunk
	//	*PastStream_Checksum
	//	*PastStream_Error_
	Data isPastStream_Data `protobuf_oneof:"data"`
}

func (x *PastStream) Reset() {
	*x = PastStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PastStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PastStream) ProtoMessage() {}

func (x *PastStream) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PastStream.ProtoReflect.Descriptor instead.
func (*PastStream) Descriptor() ([]byte, []int) {
	return file_proto_cp_proto_rawDescGZIP(), []int{4}
}

func (m *PastStream) GetData() isPastStream_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *PastStream) GetInfo() *PastStream_Info {
	if x, ok := x.GetData().(*PastStream_Info_); ok {
		return x.Info
	}
	return nil
}

func (x *PastStream) GetChunk() []byte {
	if x, ok := x.GetData().(*PastStream_Chunk); ok {
		return x.Chunk
	}
	return nil
}

func (x *PastStream) GetChecksum() []byte {
	if x, ok := x.GetData().(*PastStream_Checksum); ok {
		return x.Checksum
	}
	return nil
}

func (x *PastStream) GetError() *PastStream_Error {
	if x, ok := x.GetData().(*PastStream_Error_); ok {
		return x.Error
	}
	return nil
}

type isPastStream_Data interface {
	isPastStream_Data()
}

type PastStream_Info_ struct {
	Info *PastStream_Info `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type PastStream_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

type PastStream_Checksum struct {
	Checksum []byte `protobuf:"bytes,3,opt,name=checksum,proto3,oneof"`
}

type PastStream_Error_ struct {
	Error *PastStream_Error `protobuf:"bytes,4,opt,name=error,proto3,oneof"`
}

func (*PastStream_Info_) isPastStream_Data() {}

func (*PastStream_Chunk) isPastStream_Data() {}

func (*PastStream_Checksum) isPastStream_Data() {}

func (*PastStream_Error_) isPastStream_Data() {}

type CopyStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*CopyStream_Info_
	//	*CopyStream_Chunk
	//	*CopyStream_Checksum
	Data isCopyStream_Data `protobuf_oneof:"data"`
}

func (x *CopyStream) Reset() {
	*x = CopyStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyStream) ProtoMessage() {}

func (x *CopyStream) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyStream.ProtoReflect.Descriptor instead.
func (*CopyStream) Descriptor() ([]byte, []int) {
	return file_proto_cp_proto_rawDescGZIP(), []int{5}
}

func (m *CopyStream) GetData() isCopyStream_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *CopyStream) GetInfo() *CopyStream_Info {
	if x, ok := x.GetData().(*CopyStream_Info_); ok {
		return x.Info
	}
	return nil
}

func (x *CopyStream) GetChunk() []byte {
	if x, ok := x.GetData().(*CopyStream_Chunk); ok {
		return x.Chunk
	}
	return nil
}

func (x *CopyStream) GetChecksum() []byte {
	if x, ok := x.GetData().(*CopyStream_Checksum); ok {
		return x.Checksum
	}
	return nil
}

type isCopyStream_Data interface {
	isCopyStream_Data()
}

type CopyStream_Info_ struct {
	Info *CopyStream_Info `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type CopyStream_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

type CopyStream_Checksum struct {
	Checksum []byte `protobuf:"bytes,3,opt,name=checksum,proto3,oneof"`
}

func (*CopyStream_Info_) isCopyStream_Data() {}

func (*CopyStream_Chunk) isCopyStream_Data() {}

func (*CopyStream_Checksum) isCopyStream_Data() {}

type PastStream_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checksum       bool   `protobuf:"varint,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Compressed     bool   `protobuf:"varint,2,opt,name=compressed,proto3" json:"compressed,omitempty"`
	MasterKeyNonce []byte `protobuf:"bytes,3,opt,name=master_key_nonce,json=masterKeyNonce,proto3" json:"master_key_nonce,omitempty"`
	KeyNonce       []byte `protobuf:"bytes,4,opt,name=key_nonce,json=keyNonce,proto3" json:"key_nonce,omitempty"`
	Iv             []byte `protobuf:"bytes,5,opt,name=iv,proto3" json:"iv,omitempty"`
}

func (x *PastStream_Info) Reset() {
	*x = PastStream_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PastStream_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PastStream_Info) ProtoMessage() {}

func (x *PastStream_Info) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PastStream_Info.ProtoReflect.Descriptor instead.
func (*PastStream_Info) Descriptor() ([]byte, []int) {
	return file_proto_cp_proto_rawDescGZIP(), []int{4, 0}
}

func (x *PastStream_Info) GetChecksum() bool {
	if x != nil {
		return x.Checksum
	}
	return false
}

func (x *PastStream_Info) GetCompressed() bool {
	if x != nil {
		return x.Compressed
	}
	return false
}

func (x *PastStream_Info) GetMasterKeyNonce() []byte {
	if x != nil {
		return x.MasterKeyNonce
	}
	return nil
}

func (x *PastStream_Info) GetKeyNonce() []byte {
	if x != nil {
		return x.KeyNonce
	}
	return nil
}

func (x *PastStream_Info) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

type PastStream_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    PastStream_Error_Type `protobuf:"varint,1,opt,name=type,proto3,enum=proto.PastStream_Error_Type" json:"type,omitempty"`
	Message string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PastStream_Error) Reset() {
	*x = PastStream_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PastStream_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PastStream_Error) ProtoMessage() {}

func (x *PastStream_Error) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PastStream_Error.ProtoReflect.Descriptor instead.
func (*PastStream_Error) Descriptor() ([]byte, []int) {
	return file_proto_cp_proto_rawDescGZIP(), []int{4, 1}
}

func (x *PastStream_Error) GetType() PastStream_Error_Type {
	if x != nil {
		return x.Type
	}
	return PastStream_Error_INVALID_OPTION
}

func (x *PastStream_Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CopyStream_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ttl            int64  `protobuf:"varint,1,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Compressed     bool   `protobuf:"varint,2,opt,name=compressed,proto3" json:"compressed,omitempty"`
	MasterKeyNonce []byte `protobuf:"bytes,3,opt,name=master_key_nonce,json=masterKeyNonce,proto3" json:"master_key_nonce,omitempty"`
	KeyNonce       []byte `protobuf:"bytes,4,opt,name=key_nonce,json=keyNonce,proto3" json:"key_nonce,omitempty"`
	Iv             []byte `protobuf:"bytes,5,opt,name=iv,proto3" json:"iv,omitempty"`
}

func (x *CopyStream_Info) Reset() {
	*x = CopyStream_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyStream_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyStream_Info) ProtoMessage() {}

func (x *CopyStream_Info) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyStream_Info.ProtoReflect.Descriptor instead.
func (*CopyStream_Info) Descriptor() ([]byte, []int) {
	return file_proto_cp_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CopyStream_Info) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *CopyStream_Info) GetCompressed() bool {
	if x != nil {
		return x.Compressed
	}
	return false
}

func (x *CopyStream_Info) GetMasterKeyNonce() []byte {
	if x != nil {
		return x.MasterKeyNonce
	}
	return nil
}

func (x *CopyStream_Info) GetKeyNonce() []byte {
	if x != nil {
		return x.KeyNonce
	}
	return nil
}

func (x *CopyStream_Info) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

var File_proto_cp_proto protoreflect.FileDescriptor

var file_proto_cp_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x62, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x62, 0x50, 0x61, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x67, 0x72, 0x70, 0x63, 0x4d, 0x61, 0x78,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x67, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x67, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x64, 0x65, 0x76, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x64, 0x65, 0x76, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x67, 0x72, 0x70, 0x63,
	0x5f, 0x6d, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x72,
	0x70, 0x63, 0x4d, 0x54, 0x6c, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x70, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x69, 0x76, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x08, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3b,
	0x0a, 0x0d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x32, 0x0a, 0x0b, 0x50,
	0x61, 0x73, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x22,
	0xca, 0x03, 0x0a, 0x0a, 0x50, 0x61, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2c,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x05,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x1a, 0x99, 0x01, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x76, 0x1a,
	0x82, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x61, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8a, 0x02, 0x0a,
	0x0a, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x12, 0x1c, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x1a,
	0x8f, 0x01, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69,
	0x76, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xed, 0x01, 0x0a, 0x0c, 0x57, 0x65,
	0x62, 0x43, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x43, 0x6f,
	0x70, 0x79, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28,
	0x01, 0x12, 0x32, 0x0a, 0x05, 0x50, 0x61, 0x73, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x22, 0x00, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x05, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x42, 0x24, 0x5a, 0x22, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x67, 0x65, 0x72, 0x77, 0x69, 0x6c,
	0x6c, 0x39, 0x30, 0x2f, 0x77, 0x65, 0x62, 0x63, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_cp_proto_rawDescOnce sync.Once
	file_proto_cp_proto_rawDescData = file_proto_cp_proto_rawDesc
)

func file_proto_cp_proto_rawDescGZIP() []byte {
	file_proto_cp_proto_rawDescOnce.Do(func() {
		file_proto_cp_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_cp_proto_rawDescData)
	})
	return file_proto_cp_proto_rawDescData
}

var file_proto_cp_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_cp_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_cp_proto_goTypes = []interface{}{
	(PastStream_Error_Type)(0), // 0: proto.PastStream.Error.Type
	(*ServerStatus)(nil),       // 1: proto.ServerStatus
	(*Clipboard)(nil),          // 2: proto.Clipboard
	(*LockedTransaction)(nil),  // 3: proto.LockedTransaction
	(*PasteOption)(nil),        // 4: proto.PasteOption
	(*PastStream)(nil),         // 5: proto.PastStream
	(*CopyStream)(nil),         // 6: proto.CopyStream
	nil,                        // 7: proto.LockedTransaction.VersionsEntry
	(*PastStream_Info)(nil),    // 8: proto.PastStream.Info
	(*PastStream_Error)(nil),   // 9: proto.PastStream.Error
	(*CopyStream_Info)(nil),    // 10: proto.CopyStream.Info
	(*emptypb.Empty)(nil),      // 11: google.protobuf.Empty
}
var file_proto_cp_proto_depIdxs = []int32{
	7,  // 0: proto.LockedTransaction.versions:type_name -> proto.LockedTransaction.VersionsEntry
	8,  // 1: proto.PastStream.info:type_name -> proto.PastStream.Info
	9,  // 2: proto.PastStream.error:type_name -> proto.PastStream.Error
	10, // 3: proto.CopyStream.info:type_name -> proto.CopyStream.Info
	0,  // 4: proto.PastStream.Error.type:type_name -> proto.PastStream.Error.Type
	6,  // 5: proto.WebClipboard.Copy:input_type -> proto.CopyStream
	4,  // 6: proto.WebClipboard.Paste:input_type -> proto.PasteOption
	11, // 7: proto.WebClipboard.Clean:input_type -> google.protobuf.Empty
	11, // 8: proto.WebClipboard.Status:input_type -> google.protobuf.Empty
	11, // 9: proto.WebClipboard.Copy:output_type -> google.protobuf.Empty
	5,  // 10: proto.WebClipboard.Paste:output_type -> proto.PastStream
	11, // 11: proto.WebClipboard.Clean:output_type -> google.protobuf.Empty
	1,  // 12: proto.WebClipboard.Status:output_type -> proto.ServerStatus
	9,  // [9:13] is the sub-list for method output_type
	5,  // [5:9] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_proto_cp_proto_init() }
func file_proto_cp_proto_init() {
	if File_proto_cp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_cp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clipboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockedTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasteOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PastStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PastStream_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PastStream_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyStream_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_cp_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*PastStream_Info_)(nil),
		(*PastStream_Chunk)(nil),
		(*PastStream_Checksum)(nil),
		(*PastStream_Error_)(nil),
	}
	file_proto_cp_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*CopyStream_Info_)(nil),
		(*CopyStream_Chunk)(nil),
		(*CopyStream_Checksum)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_cp_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_cp_proto_goTypes,
		DependencyIndexes: file_proto_cp_proto_depIdxs,
		EnumInfos:         file_proto_cp_proto_enumTypes,
		MessageInfos:      file_proto_cp_proto_msgTypes,
	}.Build()
	File_proto_cp_proto = out.File
	file_proto_cp_proto_rawDesc = nil
	file_proto_cp_proto_goTypes = nil
	file_proto_cp_proto_depIdxs = nil
}
